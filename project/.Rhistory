model = nls(y ~ I(1/x*a) + b*x, data = dat, start = list(a = 1, b = 1))
model2 = nls(y ~ I(exp(1)^(a + b * x)), data=dat, start = list(a=0,b=0))
ggplot(dat, aes(x, y)) + geom_point(size = 1)+
stat_smooth(method = "nls", formula = as.formula(model), data=dat, start = list(a=0,b=0), size = 1, se = FALSE, colour = "red")+
stat_smooth(method = "nls", formula = as.formula(model2), data=dat, start = list(a=0,b=0), size = 1, se = FALSE, colour = "blue")
summary(model2)
#find out model2 is better and a=-3.59 b =-0.02
dat2 = data.frame(x=h$mids, y=exp(1)^(-3.59-0.02*h$mids))
MSE=sum((dat2$y-dat$y)^2)/max(degree(g))
avg_degree = mean(degree(g))
library(ggplot2)
h = hist(degree(g), breaks=seq(0, by=1 , length.out=max(d
dat = data.frame(x=h$mids, y=h$density)
model = nls(y ~ I(1/x*a) + b*x, data = dat, start = list(a = 1, b = 1))
model2 = nls(y ~ I(exp(1)^(a + b * x)), data=dat, start = list(a=0,b=0))
ggplot(dat, aes(x, y)) + geom_point(size = 1)+
stat_smooth(method = "nls", formula = as.formula(model), data=dat, start = list(a=0,b=0), size = 1, se = FALSE, colour = "red")+
stat_smooth(method = "nls", formula = as.formula(model2), data=dat, start = list(a=0,b=0), size = 1, se = FALSE, colour = "blue")
summary(model2)
#find out model2 is better and a=-3.59 b =-0.02
dat2 = data.frame(x=h$mids, y=exp(1)^(-3.59-0.02*h$mids))
MSE=sum((dat2$y-dat$y)^2)/max(degree(g))
avg_degree = mean(degree(g))
library(ggplot2)
h = hist(degree(g), breaks=seq(0, by=1 , length.out=max(degree(g)+2))
dat = data.frame(x=h$mids, y=h$density)
model = nls(y ~ I(1/x*a) + b*x, data = dat, start = list(a = 1, b = 1))
model2 = nls(y ~ I(exp(1)^(a + b * x)), data=dat, start = list(a=0,b=0))
ggplot(dat, aes(x, y)) + geom_point(size = 1)+
stat_smooth(method = "nls", formula = as.formula(model), data=dat, start = list(a=0,b=0), size = 1, se = FALSE, colour = "red")+
stat_smooth(method = "nls", formula = as.formula(model2), data=dat, start = list(a=0,b=0), size = 1, se = FALSE, colour = "blue")
summary(model2)
#find out model2 is better and a=-3.59 b =-0.02
dat2 = data.frame(x=h$mids, y=exp(1)^(-3.59-0.02*h$mids))
MSE=sum((dat2$y-dat$y)^2)/max(degree(g))
avg_degree = mean(degree(g))
library(ggplot2)
h = hist(degree(g), breaks=seq(0, by=1 , length.out=max(degree(g)+2))
dat = data.frame(x=h$mids, y=h$density)
model = nls(y ~ I(1/x*a) + b*x, data = dat, start = list(a = 1, b = 1))
model2 = nls(y ~ I(exp(1)^(a + b * x)), data=dat, start = list(a=0,b=0))
ggplot(dat, aes(x, y)) + geom_point(size = 1)+
stat_smooth(method = "nls", formula = as.formula(model), data=dat, start = list(a=0,b=0), size = 1, se = FALSE, colour = "red")+
stat_smooth(method = "nls", formula = as.formula(model2), data=dat, start = list(a=0,b=0), size = 1, se = FALSE, colour = "blue")
summary(model2)
#find out model2 is better and a=-3.59 b =-0.02
dat2 = data.frame(x=h$mids, y=exp(1)^(-3.59-0.02*h$mids))
MSE=sum((dat2$y-dat$y)^2)/max(degree(g))
avg_degree = mean(degree(g))
library(ggplot2)
h = hist(degree(g), breaks=seq(0, by=1 , length.out=max(degree(g))+2))
dat = data.frame(x=h$mids, y=h$density)
model = nls(y ~ I(1/x*a) + b*x, data = dat, start = list(a = 1, b = 1))
model2 = nls(y ~ I(exp(1)^(a + b * x)), data=dat, start = list(a=0,b=0))
ggplot(dat, aes(x, y)) + geom_point(size = 1)+
stat_smooth(method = "nls", formula = as.formula(model), data=dat, start = list(a=0,b=0), size = 1, se = FALSE, colour = "red")+
stat_smooth(method = "nls", formula = as.formula(model2), data=dat, start = list(a=0,b=0), size = 1, se = FALSE, colour = "blue")
summary(model2)
#find out model2 is better and a=-3.59 b =-0.02
dat2 = data.frame(x=h$mids, y=exp(1)^(-3.59-0.02*h$mids))
MSE=sum((dat2$y-dat$y)^2)/max(degree(g))
avg_degree = mean(degree(g))
g_node1 = induced.subgraph(g, c(1, neighbors(g,1)))
vertexvector = rep(3,vcount(g_node1))
vertexvector[1]=5
vertexcolor = rep("magenta",vcount(g_node1))
vertexcolor[1] ="black"
plot.igraph(g_node1,vertex.size=vertexvector,vertex.label =NA,vertex.color=vertexcolor)
n_node = vcount(g_node1)
n_edge = ecount(g_node1)
g_node1 = induced.subgraph(g, c(1, neighbors(g,1)))
plot(g_node1, vertex.label=NA)
n_node = vcount(g_node1)
n_edge = ecount(g_node1)
g_node1 = induced.subgraph(g, c(1, neighbors(g,1)))
vertexvector = rep(3,vcount(g_node1))
vertexvector[1]=5
vertexcolor = rep("magenta",vcount(g_node1))
vertexcolor[1] ="black"
plot.igraph(g_node1,vertex.size=vertexvector,vertex.label =NA,vertex.color=vertexcolor)
n_node = vcount(g_node1)
n_edge = ecount(g_node1)
core_index = numeric(0)
core_degree = numeric(0)
for(i in 1: length(degree(g))){
if(length(neighbors(g,i))>200){
core_index = c(core_index, i)
core_degree = c(core_degree, length(neighbors(g,i)))
}
}
core_ave_degree = mean(core_degree)
fg = fastgreedy.community(g_node1)
color_vec = fg$membership+1
plot(g_node1,vertex.color=color_vec,vertex.label=NA,vertex.size=3)
eb = edge.betweenness.community(g_node1)
color_vec = eb$membership+1
plot(g_node1,vertex.color=color_vec,vertex.label=NA,vertex.size=3)
ic = infomap.community(g_node1)
color_vec = ic$membership+1
plot(g_node1,vertex.color=color_vec,vertex.label=NA,vertex.size=3)
g_node1_removed = induced.subgraph(g,neighbors(g,1))
fg2 = fastgreedy.community(g_node1_removed)
plot(fg2, g_node1_removed, vertex.label=NA)
eb2 = edge.betweenness.community(g_node1_removed)
plot(eb2,g_node1_removed, vertex.label=NA)
ic_r = infomap.community(g_node1_removed)
plot(ic_r,g_node1_removed, vertex.label=NA)
g_node1_removed = induced.subgraph(g,neighbors(g,1))
fg2 = fastgreedy.community(g_node1_removed)
plot(fg2, g_node1_removed, vertex.label=NA, vertex.size=3)
eb2 = edge.betweenness.community(g_node1_removed)
plot(eb2,g_node1_removed, vertex.label=NA, vertex.size=3)
ic_r = infomap.community(g_node1_removed)
plot(ic_r,g_node1_removed, vertex.label=NA, vertex.size=3)
library("igraph")
#modify this filePath to the absolute path of facebook_combined.txt on your own computer
filePath = "/Users/Xcy/Code/R/project/facebook_combined.txt"
g = read.graph(file = filePath,directed=FALSE)
#calculate core node
core_index = numeric(0)
core_degree = numeric(0)
for(i in 1: length(degree(g))){
if(length(neighbors(g,i))>200){
core_index = c(core_index, i)
core_degree = c(core_degree, length(neighbors(g,i)))
}
}
g_node1 = induced.subgraph(g, c(1, neighbors(g,1)))
vertexvector = rep(3,vcount(g_node1))
vertexvector[1]=5
vertexcolor = rep("magenta",vcount(g_node1))
vertexcolor[1] ="black"
plot.igraph(g_node1,vertex.size=vertexvector,vertex.label =NA,vertex.color=vertexcolor)
n_node = vcount(g_node1)
n_edge = ecount(g_node1)
V(g)$name = V(g)
#embeddedness
embeddedness=numeric(0)
#core_presonal_network
#core no.
i=3
core_neighbors =neighbors(g,core_index[i])
core_personal = induced.subgraph(g,c(core_index[i],core_neighbors))
for(j in 1:length(core_neighbors))
{
embeddedness =c(embeddedness,length(intersect(neighbors(g,core_index[i]),neighbors(g,core_neighbors[j]))))
}
#dispersion
dispersion = numeric(0)
for(k in 1: length(core_neighbors))
{
#delete core node and said node
mutual_friends = intersect(neighbors(g,core_index[i]),neighbors(g,core_neighbors[k]))
dispersion_sub_graph = delete.vertices(core_personal,c(which(V(core_personal)$name==core_index[i]),which(V(core_personal)$name==core_neighbors[k])))
shortestpath=numeric(0)
for(m in 1:length(mutual_friends))
{
for(n in (m+1): length(mutual_friends))
{
shortestpath = c(shortestpath,shortest.paths(dispersion_sub_graph,which(V(dispersion_sub_graph)$name==mutual_friends[m]),which(V(dispersion_sub_graph)$name==mutual_friends[n])))
}
}
dispersion = c(dispersion, sum(shortestpath[which(shortestpath!=Inf)]))
}
max_dispersion = which.max(dispersion)
dis_highlight_node_in_g = core_neighbors[max_dispersion]
max_embeddedness = which.max(embeddedness)
emb_highlight_node_in_g = core_neighbors[max_embeddedness]
max_dispersion_embeddedness = which.max(dispersion*(1/embeddedness))
dis_emb_highlight_node_in_g = core_neighbors[max_dispersion_embeddedness]
dispersion
hist(dispersion)
hist(embeddeness)
hist(embeddedness)
core_community = fastgreedy.community(core_personal)
color_vec = core_community$membership+1
plot(core_personal,vertex.color=color_vec,vertex.label=NA,vertex.size=3)
source('~/Code/R/project/Problem#6.R', echo=TRUE)
source('~/Code/R/project/Problem7.R', echo=TRUE)
source('~/Code/R/project/Problem7.R', echo=TRUE)
source('~/Code/R/project/Problem7.R', echo=TRUE)
source('~/Code/R/project/Problem7.R', echo=TRUE)
for x in 7:7
7:7
source('~/Dropbox/232E/project/Problem7.R', echo=TRUE)
source('~/Dropbox/232E/project/Problem7.R', echo=TRUE)
for(j in 1:max(wc$membership)){
select <- vector()
for(i in 1:length(wc$membership)){
if(wc$membership[i]==j){
select <- c(select,(wc$name[i]))
}
}
percentage <- vector()
percentage_circle <- vector()
for(k in 1:length(circles)){
intersect_id <- intersect(select,circles[[k]])
temp_percentage <- length(intersect_id)/length(select)
temp_percentage_circle <- length(intersect_id)/length(circles[[k]])
percentage_circle<- c(percentage_circle,temp_percentage_circle)
percentage <- c(percentage, temp_percentage)
}
print('-----------------------')
print(percentage)
print(percentage_circle)
}
for(j in 1:max(wc$membership)){
select <- vector()
for(i in 1:length(wc$membership)){
if(wc$membership[i]==j){
select <- c(select,(wc$name[i]))
}
}
percentage <- vector()
percentage_circle <- vector()
for(k in 1:n_circle$V1[1]){
intersect_id <- intersect(select,circles[[k]])
temp_percentage <- length(intersect_id)/length(select)
temp_percentage_circle <- length(intersect_id)/length(circles[[k]])
percentage_circle<- c(percentage_circle,temp_percentage_circle)
percentage <- c(percentage, temp_percentage)
}
}
select
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/232E/project/Problem7.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
print("i=",i)
print("i=",1)
print("i=1")
print("i=%d",i)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/232E/project/Problem7.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
fp=file(circlesFile, open="r")
content = readLines(fp)
content
length(content)
str = strsplit(content[1],"\t")
str
for(k in 1:length(content)){
str[k] = strsplit(content[k],"\t")
}
str[1]
str[2]
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/232E/project/Problem7.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
cmt
cmt$membership
source('~/.active-rstudio-document', echo=TRUE)
#=========================================================================
#################---------Problem 1-----------------######################
#=========================================================================
library("igraph")
#modify this filePath to the absolute path of facebook_combined.txt on your own computer
filePath = "/Users/Xcy/Code/R/project/facebook_combined.txt"
g = read.graph(file = filePath, format="ncol", directed=FALSE)
connectivity = is.connected(g)
d = diameter(g)
dg = degree.distribution(g)
plot(dg, type= "h")
plot(dg, type= "h", main="Degree Distribution", xlab="degree", ylab="density")
library(ggplot2)
h = hist(degree(g), breaks=seq(0, by=1 , length.out=max(degree(g))+2))
dat = data.frame(x=h$mids, y=h$density)
model = nls(y ~ I(1/x*a) + b*x, data = dat, start = list(a = 1, b = 1))
model2 = nls(y ~ I(exp(1)^(a + b * x)), data=dat, start = list(a=0,b=0))
ggplot(dat, aes(x, y)) + geom_point(size = 1)+
stat_smooth(method = "nls", formula = as.formula(model), data=dat, start = list(a=0,b=0), size = 1, se = FALSE, colour = "red")+
stat_smooth(method = "nls", formula = as.formula(model2), data=dat, start = list(a=0,b=0), size = 1, se = FALSE, colour = "blue")
summary(model2)
#find out model2 is better and a=-3.59 b =-0.02
dat2 = data.frame(x=h$mids, y=exp(1)^(-3.59-0.02*h$mids))
MSE=sum((dat2$y-dat$y)^2)/max(degree(g))
avg_degree = mean(degree(g))
#=========================================================================
#################-------------Problem 2-------------######################
#=========================================================================
g_node1 = induced.subgraph(g, c(1, neighbors(g,1)))
vertexvector = rep(3,vcount(g_node1))
vertexvector[1]=5
vertexcolor = rep("magenta",vcount(g_node1))
vertexcolor[1] ="black"
plot.igraph(g_node1,vertex.size=vertexvector,vertex.label =NA,vertex.color=vertexcolor)
n_node = vcount(g_node1)
n_edge = ecount(g_node1)
core_index = numeric(0)
core_degree = numeric(0)
for(i in 1: length(degree(g))){
if(length(neighbors(g,i))>200){
core_index = c(core_index, i)
core_degree = c(core_degree, length(neighbors(g,i)))
}
}
core_ave_degree = mean(core_degree)
fg = fastgreedy.community(g_node1)
color_vec = fg$membership+1
plot(g_node1,vertex.color=color_vec,vertex.label=NA,vertex.size=3)
eb = edge.betweenness.community(g_node1)
color_vec = eb$membership+1
plot(g_node1,vertex.color=color_vec,vertex.label=NA,vertex.size=3)
ic = infomap.community(g_node1)
color_vec = ic$membership+1
plot(g_node1,vertex.color=color_vec,vertex.label=NA,vertex.size=3)
plot(g_node1,vertex.label=NA,vertex.size=3)
fg = fastgreedy.community(g_node1)
color_vec = fg$membership+1
plot(g_node1,vertex.color=color_vec,vertex.label=NA,vertex.size=3)
eb = edge.betweenness.community(g_node1)
color_vec = eb$membership+1
plot(g_node1,vertex.color=color_vec,vertex.label=NA,vertex.size=3)
ic = infomap.community(g_node1)
color_vec = ic$membership+1
plot(g_node1,vertex.color=color_vec,vertex.label=NA,vertex.size=3)
g_node1_removed = induced.subgraph(g,neighbors(g,1))
fg2 = fastgreedy.community(g_node1_removed)
plot(fg2, g_node1_removed, vertex.label=NA, vertex.size=3)
fg2 = fastgreedy.community(g_node1_removed)
color_vec = fg2$membership+1
plot(g_node1_removed, color=color_vec, vertex.label=NA, vertex.size=3)
fg2 = fastgreedy.community(g_node1_removed)
color_vec = fg2$membership+1
plot(g_node1_removed, vertex.color=color_vec, vertex.label=NA, vertex.size=3)
eb2 = edge.betweenness.community(g_node1_removed)
color_vec = eb2$membership+1
plot(g_node1_removed, vertex.color=color_vec,vertex.label=NA, vertex.size=3)
ic_r = infomap.community(g_node1_removed)
color_vec = ic_r$membership+1
plot(g_node1_removed, vertex.color=color_vec,vertex.label=NA, vertex.size=3)
source('~/Code/R/project/Problem7.R', echo=TRUE)
source('~/Dropbox/232E/project/Problem7.R', echo=TRUE)
fp=file(circlesFile,open="r")
content = readLines(fp)
close(fp)
source('~/Dropbox/232E/project/Problem7 (original).R', echo=TRUE)
source('~/Dropbox/232E/project/Problem7 (original).R', echo=TRUE)
source('~/Dropbox/232E/project/Problem7 (original).R', echo=TRUE)
content
length(content)
content(1)
content{1}
content$1
content[1]
for(j in 1:length(content)){
circle{j}=strsplit(content[j],"\t")
}
for(j in 1:length(content)){
circle[j]=strsplit(content[j],"\t")
}
circle=list()
for(j in 1:length(content)){
circle[j]=strsplit(content[j],"\t")
}
circle
circle$1
for(j in 1:length(content)){
circle{j}=strsplit(content[j],"\t")
}
circle=list()
for(j in 1:length(content)){
circle=strsplit(content[j],"\t")
}
content
content[1]
circle
for(j in 1:length(content)){
circle$j=strsplit(content[j],"\t")
}
circle=list()
for(j in 1:length(content)){
circle$j=strsplit(content[j],"\t")
}
circle=list()
for(j in 1:length(content)){
circle[j]=strsplit(content[j],"\t")
}
circle[1]
circle[2]
circle[3]
circle[4]
cmt = walktrap.community(g2)
#cmt = infomap.community(g2)
#do whatever processing next
for(m in 1:max(cmt$membership)){
select = vector()
for(n in 1:length(cmt$membership)){
if(wc$membership[n]==m){
select = c(select,(wc$name[n]))
}
}
percentage = vector()
for(n in 1:n_circle$V1[1]){
intersect_id <- intersect(select,circle[n])
temp_percentage <- length(intersect_id)/length(select)
percentage <- c(percentage, temp_percentage)
}
print(percentage)
}
cmt = walktrap.community(g2)
#cmt = infomap.community(g2)
#do whatever processing next
for(m in 1:max(cmt$membership)){
select = vector()
for(n in 1:length(cmt$membership)){
if(cmt$membership[n]==m){
select = c(select,(wc$name[n]))
}
}
percentage = vector()
for(n in 1:n_circle$V1[1]){
intersect_id <- intersect(select,circle[n])
temp_percentage <- length(intersect_id)/length(select)
percentage <- c(percentage, temp_percentage)
}
print(percentage)
}
cmt = walktrap.community(g2)
#cmt = infomap.community(g2)
#do whatever processing next
for(m in 1:max(cmt$membership)){
select = vector()
for(n in 1:length(cmt$membership)){
if(cmt$membership[n]==m){
select = c(select,(cmt$name[n]))
}
}
percentage = vector()
for(n in 1:n_circle$V1[1]){
intersect_id <- intersect(select,circle[n])
temp_percentage <- length(intersect_id)/length(select)
percentage <- c(percentage, temp_percentage)
}
print(percentage)
}
cmt = walktrap.community(g2)
#cmt = infomap.community(g2)
#do whatever processing next
for(m in 1:max(cmt$membership)){
select = vector()
for(n in 1:length(cmt$membership)){
if(cmt$membership[n]==m){
select = c(select,(cmt$name[n]))
}
}
percentage = vector()
for(n in 1:n_circle$V1[1]){
intersection <- intersect(select,circle[n])
temp <- length(intersection)/length(select)
percentage <- c(percentage, temp)
}
print(percentage)
}
source('~/Dropbox/232E/project/Problem7 (original).R', echo=TRUE)
select
circle
length(circle)
n_circle$V1[1]
source('~/Dropbox/232E/project/Problem7 (original).R', echo=TRUE)
circle[1]
interset(select,circle[1])
intersect(select,circle[1])
intersect(select,circle[2])
intersect(select,circle[3])
intersect(select,circle[4])
source('~/Dropbox/232E/project/Problem7 (original).R', echo=TRUE)
source('~/Dropbox/232E/project/Problem7 (original).R', echo=TRUE)
source('~/Dropbox/232E/project/Problem7 (original).R', echo=TRUE)
SELECT[[1]]
SELECT[[2]]
SELECT[[3]]
SELECT[[4]]
SELECT[[5]]
intersect(SELECT[[1]],circle[1])
intersect(SELECT[[1]],circle[2])
intersect(SELECT[[1]],circle[3])
intersect(SELECT[[1]],circle[4])
intersect(SELECT[[2]],circle[1])
intersect(SELECT[[2]],circle[2])
intersect(SELECT[[2]],circle[3])
intersect(SELECT[[2]],circle[4])
circle[1]
source('~/Dropbox/232E/project/Problem7 (original).R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
length(circle[1])
length(circle[2])
length(circle[3])
length(circle[4])
circle[1]
length(circle[1])
circle[1][1]
circle[1][2]
circle[2]
circle[3]
circle[4]
circle[5]
circle[[1]]
circle[[2]]
circle[[1]][1]
source('~/Dropbox/232E/project/Problem7 (original).R', echo=TRUE)
source('~/Dropbox/232E/project/Problem7 (original).R', echo=TRUE)
source('~/Dropbox/232E/project/Problem7 (original).R', echo=TRUE)
source('~/Dropbox/232E/project/Problem7 (original).R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
